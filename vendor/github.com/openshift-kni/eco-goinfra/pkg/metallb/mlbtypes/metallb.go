package mlbtypes

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// MetalLBLogLevel defines MetalLB Log Level.
type MetalLBLogLevel string

// MetalLBSpec defines the desired state of MetalLB.
type MetalLBSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Foo is an example field of MetalLB. Edit MetalLB_types.go to remove/update
	MetalLBImage string `json:"image,omitempty"`

	// node selector applied to MetalLB speaker daemonset.
	// +optional
	SpeakerNodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// tolerations is a list of tolerations applied to MetalLB speaker
	// daemonset.
	// +optional
	SpeakerTolerations []corev1.Toleration `json:"speakerTolerations,omitempty"`

	// Define the verbosity of the controller and the speaker logging.
	// Allowed values are: all, debug, info, warn, error, none. (default: info)
	// +optional
	// +kubebuilder:validation:Enum=all;debug;info;warn;error;none
	LogLevel MetalLBLogLevel `json:"logLevel,omitempty"`

	// The loadBalancerClass spec attribute that the MetalLB controller should
	// be watching for. must be a label-style identifier, with an optional
	// prefix such as "internal-vip" or "example.com/internal-vip". Unprefixed
	// names are reserved for end-users.
	// +optional
	// +kubebuilder:validation:Pattern=`^([a-z0-9A-Z]([\w.\-]*[a-z0-9A-Z])?/)?[a-z0-9A-Z]([\w.\-]*[a-z0-9A-Z])?$`
	LoadBalancerClass string `json:"loadBalancerClass,omitempty"`

	// node selector applied to MetalLB controller deployment.
	// +optional
	ControllerNodeSelector map[string]string `json:"controllerNodeSelector,omitempty"`

	// tolerations is a list of tolerations applied to MetalLB controller
	// deployment.
	// +optional
	ControllerTolerations []corev1.Toleration `json:"controllerTolerations,omitempty"`

	// additional configs to be applied on MetalLB Controller deployment.
	// +optional
	ControllerConfig *Config `json:"controllerConfig,omitempty"`

	// additional configs to be applied on MetalLB Speaker daemonset.
	// +optional
	SpeakerConfig *Config `json:"speakerConfig,omitempty"`
}

// Config type definition.
type Config struct {
	// Define priority class name
	// +optional
	PriorityClassName string `json:"priorityClassName,omitempty"`

	// Define container runtime configuration class
	// +optional
	RuntimeClassName string `json:"runtimeClassName,omitempty"`

	// If specified, the pod's scheduling constraints
	// +optional
	Affinity *corev1.Affinity `json:"affinity,omitempty"`

	// Annotations to be applied for MetalLB Operator
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`

	// Resource Requirements to be applied for containers which gets deployed
	// via MetalLB Operator
	// +optional
	Resources *corev1.ResourceRequirements `json:"resources,omitempty"`
}

// MetalLBStatus defines the observed state of MetalLB.
type MetalLBStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Conditions show the current state of the MetalLB Operator
	Conditions []metav1.Condition `json:"conditions,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// MetalLB is the Schema for the metallbs API.
type MetalLB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   MetalLBSpec   `json:"spec,omitempty"`
	Status MetalLBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetalLBList contains a list of MetalLB.
type MetalLBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MetalLB `json:"items"`
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BGPPeer.
func (in *MetalLB) DeepCopy() *MetalLB {
	if in == nil {
		return nil
	}

	out := new(MetalLB)

	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MetalLB) DeepCopyObject() runtime.Object { //nolint:ireturn
	if c := in.DeepCopy(); c != nil {
		return c
	}

	return nil
}
